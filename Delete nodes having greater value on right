

/*
class Node {
   int data;
   Node next;

  Node(int data) {
      this.data = data;
  }
}
*/
class Solution
{
    Node compute(Node head)
    {
        // your code here
        
        Node rev=reverse(head);
        Node ans=new Node(-1);
        Node ptr=ans;
        
        while(rev!=null)
        {
            if(rev.data>=ptr.data)
            {
                ptr.next=rev;
                ptr=ptr.next;
            }
            
            rev=rev.next;
        }
        
        ptr.next=null;
        
        return reverse(ans.next);

        
    }
    
    Node reverse(Node head)
    {
        // your code here
         Node prev=null,next=null;
        
        while(head!=null)
        {
            next=head.next;
            head.next=prev;
            prev=head;
            head=next;
        }
            
            return prev;
    }

}





----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------


/*
class Node {
   int data;
   Node next;

  Node(int data) {
      this.data = data;
  }
}
*/
class Solution
{
    Node compute(Node head)
    {
        // your code here
        
        Node curr = head;
        Node prev = null;
        Node next;
        
        while(curr!=null)
        {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            
        }
        
        head = prev;
        
        Node current = head;
        Node maxNode = head;
        Node dummy;
        
        while(current != null && current.next != null)
        {
            
            if(current.next.data < maxNode.data)
            {
                dummy = current.next;
                current.next = dummy.next;
                
            }
            else
            {
                
                current = current.next;
                maxNode = current;
                
            }
        }
        
        curr = head; prev = null;
        
        while(curr!= null)
        {
            
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            
            
        
        }
        
        head = prev;
        
        return head;
        
        
        
        
        
        
        
        
        
        
    }
}
  




