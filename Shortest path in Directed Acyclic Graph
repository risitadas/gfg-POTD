

//User function Template for Java
class Solution {

	
		
	public int[] shortestPath(int N,int M, int[][] edges) 
	{
		//Code here
		
		
		
		int dis[]= new int[N];
		
		for(int i=0; i<N; i++)
		{
		    
		    
		    dis[i]=Integer.MAX_VALUE;
		}
		
		
		dis[0]=0;
		
		Stack<Integer> st=new Stack<>();
		
		boolean visited[]=new boolean [N];
		
		for(int i=0; i<N; i++)
		{
		    
		    if(!visited[i])
		    {
		        
		        topsort(edges,visited,i,st);
		    }
		}
		
		
	    while(!st.isEmpty())
	    {
	        int k=st.pop();
	        
	        
	        for(int i=0; i<M; i++)
	        {
	            
	            if(edges[i][0]==k && dis[k]!=Integer.MAX_VALUE)
	            {
	                
	                
	                if(dis[edges[i][1]]>(dis[k]+edges[i][2]))
	                {
	                    
	                    dis[edges[i][1]]=dis[k]+edges[i][2];

	                    
	                }
	            }
	        }
	        
	    }
	    
	    
	    for(int i=0; i<N; i++)
	    {
	        if(dis[i]==Integer.MAX_VALUE)
	        {
	            
	            dis[i]=-1;
	            
	        }
	    }
	    
	    
	    return dis;
	    
	    
	}
	
	
	
	public void topsort(int edges[][], boolean visited[], int s, Stack<Integer> st)
	{
	    
	    
	    visited[s]=true;
	    for(int i=0; i<edges.length; i++)
	    {
	        
	        if(edges[i][0]==s)
	        {
	            
	            if(!visited[edges[i][1]])
	            {
	                
	                topsort(edges,visited,edges[i][1],st);
	            }
	        }
	    }
	    
	    
	    st.push(s);
	}
			
		
		
		
		
		
		
		
		
		
		
}
