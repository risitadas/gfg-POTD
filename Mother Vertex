
class Solution
{
    //Function to find a Mother Vertex in the Graph.
    public int findMotherVertex(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        
        
        int[] visited = new int[V];
        int lastnode = 0;
        
        for(int i = 0; i <V; i++)
        {
            if(visited[i] == 0)
            {
                
                dfs(adj, i , visited);
                lastnode = i;
                
                
            }
        }
        
        Arrays.fill(visited, 0);
        
        dfs(adj, lastnode, visited);
        
        for(int val : visited)
        {
            
            if(val == 0)
            {
                return -1;
                
            }
        }
        
        return lastnode;
        
        
        
        
        
        
    }
    
    public void dfs(ArrayList<ArrayList<Integer>> adj, int node, int[] visited)
    {
        
        visited[node] = 1;
        
        for(int i : adj.get(node))
        {
            
            if(visited[i] == 0)
            {
                dfs(adj, i, visited);
                
            }
        }
        
        
        
        
    }
    
    
    
    
}





----------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------




class Solution
{
    //Function to find a Mother Vertex in the Graph.
    public int findMotherVertex(int V, ArrayList<ArrayList<Integer>>adj)
    {
        // Code here
        
        boolean[] visited = new boolean[V];
        int v = -1;
        
        for(int i=0; i<V; i++)
        {
            if(!visited[i])
            {
                dfs(adj, i, visited);
                v = i;
                
            }
        }
        
        boolean[] check = new boolean[V];
        dfs(adj, v, check);
        
        for(boolean val : check)
        {
            if(!val)
            {
                return -1;
                
            }
        }
        
        return v;
        
        
        
        
    }
    
    
    public static void dfs(ArrayList<ArrayList<Integer>> adj, int v, boolean[] visited)
    {
        
        visited[v] = true;
        
        for(int i : adj.get(v))
        {
            if(!visited[i])
            {
                dfs(adj, i, visited);
                
            }
        }
        
        
        
        
    }
}



















