//User function Template for Java

class Solution
{
    int[] prime;
    int max;
    
    Solution()
    {
        // Every index of prime stores zero or one
        // If prime[i] is zero means i is not a prime
        // If prime[i] is one means i is a prime
        
        max = 9999;
        prime = new int[10001];
        Arrays.fill(prime, 1);
        prime[1] = 0;
        
        
        for(int i=2;i<=max; i++)
        {
            if(prime[i] == 1)
            {
                for(int j=2; j*i <= max; j++)
                {
                    
                    prime[j*i] = 0;
                    
                }
            }
        }
        
     
        
        
        
    }
    
    public int shortestPath(int Num1,int Num2)
    {
        // Complete this function using prime array
        
        return bfs(Num1, Num2);
        
        
    }
    
    public int bfs(int source, int destination)
    {
        int[] dp =new int[10001];
        Arrays.fill(dp,-1);
        
        int[] visited=new int[10001]; 
        visited[source]=0;
        
        Queue<Integer> q = new LinkedList<>(); 
        q.add(source);
        dp[source]=0;
        
        
        
        while(q.size()>0)
        {
            int current=q.poll();
            
            if(visited[current]==1)
            {
                continue;
            }
            
            visited[current]=1;
            
            
            String s=Integer.toString(current);
            
            for(int i=0;i<4;i++)
            {
                for(char ch='0';ch<='9';ch++)
                {
                    if(ch==s.charAt(i)||(ch=='0'&&i==0))
                    {
                        continue;
                        
                    }
                    
                    String nxt=s;
                    
                    nxt=s.substring(0,i)+ch+s.substring(i+1);
                    
                    int nxtN=Integer.valueOf(nxt);
                    
                    if(prime[nxtN]==1&&dp[nxtN]==-1)
                    {
                        dp[nxtN]=1+dp[current];
                        q.add(nxtN);
                    }
                }
            }
        }
        return dp[destination];

    }
    
    
    


}
