

//User function Template for Java

class Solution {
    static int maxEvents(int[] start, int[] end, int N) 
    {
        // code here
        
        
        int[][] arr = new int[N][2];
        
        for(int i=0; i<N; i++)
        {
            arr[i][0] = start[i];
            arr[i][1] = end[i];
            
        }
        
        if(arr == null || N==0)
        {
            return 0;
        }
        
       // Arrays.sort(arr, (a,b) -> Integer.compare(a[0], b[0]));
       Arrays.sort(arr, (a,b) -> a[0] - b[0]);
        
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        int i=0, maxEventsToBeAttended = 0, currDay = 0;
        
        
        while(!pq.isEmpty() || i<N)
        {
            if(pq.isEmpty())
            {
                currDay = arr[i][0];
                
            }
            
            // while( i< N && arr[i][0] <= currDay)
            while( i< N && arr[i][0] == currDay)
            {
                pq.add(arr[i][1]);
                i++;
                
            }
            
            pq.poll();
            maxEventsToBeAttended++;
            currDay++;
            
            while(!pq.isEmpty() && pq.peek() < currDay)
            {
                
                pq.poll();
            }
        }
        
        return maxEventsToBeAttended;
        
        
        
        
        
        
        
        
    }
};
