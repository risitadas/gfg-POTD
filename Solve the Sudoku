

//User function Template for Java

class Solution
{
    //Function to find a solved Sudoku. 
    static boolean SolveSudoku(int grid[][])
    {
        // add your code here
        
        
        int row = -1, col = -1;
        boolean isEmpty = true;
        
        for(int i = 0; i<9; i++)
        {
            
            for(int j=0;j <9; j++)
            {
                
                if(grid[i][j] == 0)
                {
                    
                    row = i;
                    col = j;
                    
                    isEmpty = false;
                    break;
                    
                    
                }
            }
            
            if(!isEmpty)
            {
                break;
                
            }
        }
        
        if(isEmpty)
        {
            
            return true;
            
        }
        
        for(int num = 1; num <= 9; num++)
        {
            
            
            if(isPossible(grid, row, col, num))
            {
                
                grid[row][col] = num;
                
                if(SolveSudoku(grid))
                {
                    
                    return true;
                    
                }
                else
                {
                    grid[row][col] = 0;
                    
                    
                }
            }
        }
        
        return false;
        
        
        
        
        
        
        
        
        
        
        
        
    }
    
    
    public static boolean isPossible(int[][] grid, int row, int col, int num)
    {
        
        //row (row-clash) should have all the unique numbers
        for(int rc = 0; rc<grid.length; rc++)
        {
            //if number already exists , return false;
            if(grid[row][rc] == num)
            {
                
                return false;
                
                
            }
        }
        
        
        //column (col-clash) should have all the unique numbers
        for(int cc = 0; cc < grid.length; cc++)
        {
            
            //if number already present, return false;
            if(grid[cc][col] == num)
            {
                return false;
                
                
            }
            
        }
        
        
        
        //box-clash , ie. corresponding squares should have the unique numbers
        int sqrt = (int)Math.sqrt(grid.length);
        
        int boxR = row - row % sqrt;
        int boxC = col - col % sqrt;
        
        
        for(int r = boxR; r < boxR + sqrt ; r++)
        {
            
            for(int c = boxC; c < boxC + sqrt ; c++)
            {
                
                if(grid[r][c] == num)
                {
                    
                    return false;
                    
                }
                
            }
        }
        
        return true;
        
        
        
        
        
        
        
        
        
        
    }
    
    //Function to print grids of the Sudoku.
    static void printGrid (int grid[][])
    {
        // add your code here
        
        
        for(int row = 0; row < 9; row++)
        {
            
            for(int col = 0; col < 9; col++)
            {
                
                System.out.print(grid[row][col]);
                System.out.print(" ");
                
            }
        }
        
        
        
        
        
        
    }
}
