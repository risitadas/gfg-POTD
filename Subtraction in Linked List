
/*

Definition for singly Link List Node
class Node
{
    int data;
    Node next;

    Node(int x){
        data = x;
        next = null;
    }
}

You can also use the following for printing the link list.
Node.printList(Node node);
*/

class Solution {
    
    
    
    public Node subLinkedList(Node head1, Node head2)
    {
        // code here
        
        while (head1 != null && head1.data == 0) 
        {
            head1 = head1.next;
            
        }

        while (head2 != null && head2.data == 0) 
        {
            head2 = head2.next;

        }

        int n1 = length(head1);
        int n2 = length(head2);

        
        if (n1 == 0 && n2 == 0) 
        {
            
            return new Node(0);
        }

        if (n2 > n1) 
        {
            Node dummy = head1;
            head1 = head2;
            head2 = dummy;


        }
        
        if (n1 == n2) 
        {
            
            Node m1 = head1;
            Node m2 = head2;
            
            
            while (m1.data == m2.data) 
            {
                m1 = m1.next;
                m2 = m2.next;

                if (m1 == null) 
                {
                    
                    return new Node(0);
                    
                    
                }
            }
            
            

            if (m2.data > m1.data) 
            {
                Node dummy = head1;
                head1 = head2;
                head2 = dummy;
                
                
            }
        }


        
        head1 = reverse(head1); head2 = reverse(head2);
        
        Node result = null;;
        Node m1 = head1; Node m2 = head2;
        
        while(m1 != null)
        {
            int temp = 0;
            
            if(m2  != null)
            {
                temp = m2.data;
                
            }
            
            if(m1.data < temp)
            {
                if(m1.next !=null)
                {
                    m1.next.data -= 1;
                    
                }
                
                m1.data += 10;
                
            }
            
            Node n = new Node(m1.data - temp);
            n.next = result;
            result = n;
            
            
            m1 = m1.next;
            
            if(m2 != null)
            {
                m2 = m2.next;
                
                
            }
            
            
        }
        
        
        while(result != null && result.next !=null && result.data == 0)
        {
            result = result.next;
            
            
        }
        
        return result;
        
        
        
    }
    
    int length(Node n) 
    {
        int len = 0;
        while (n != null) 
        {
            len++;
            n = n.next;
        }
        
        return len;
        
        
    }
    
    
    Node reverse(Node head) 
    {
        
        Node prev = null;
        Node current = head;
        Node next = null;

        while (current != null) 
        {
            
            next = current.next; 
            current.next = prev; 
            prev = current; 
            current = next; 
        }

        return prev;
        
        
    }
    
    



}
        
