

//User function Template for Java

class Solution{
    static int palindromicPartition(String str)
    {
        // code here]
        
        int n = str.length();
        
        boolean[][] isPalindrome = new boolean[n][n];

        int[] minCuts = new int[n];

        for (int i = 0; i < n; i++) 
        {
            int min = i; 
            for (int j = 0; j <= i; j++) 
            {
                if (str.charAt(i) == str.charAt(j) && (i - j < 2 || isPalindrome[j + 1][i - 1])) 
                {
                    isPalindrome[j][i] = true;
                    min = (j == 0) ? 0 : Math.min(min, minCuts[j - 1] + 1);
                    
                    
                }
                
            }
            
            minCuts[i] = min;
        }

        return minCuts[n - 1];

        
        
        
        
        
        /*
      
        int[] C = new int[n];
        boolean[][] P = new boolean[n][n];
        
        int i, j, k, l;
        
        for(i = 0;i < n;i++)
        {
            P[i][i] = true;
            
        }
        
        
        for(l = 2; l <= n;l++)
        {
            
            for(i = 0;i < n-l+1;i++)
            {
                j = i+l-1;  
                
                if(l == 2)
                {
                    P[i][j] = (str.charAt(i) == str.charAt(j));
                    
                }
                else
                {
                    P[i][j] = ((str.charAt(i) == str.charAt(j)) & P[i+1][j-1]);
                    
                }
            } 
        }
        
        for(i = 0;i < n;i++)
        {
            if(P[0][i])
            {
                C[i] = 0;
            }
            else
            {
                C[i] = Integer.MAX_VALUE;
                
                for(j = 0;j < i;j++)
                {
                    if(P[j+1][i] == true & C[j]+1 < C[i])
                        C[i] = C[j]+1;
                }
            }
            
        }
        
        return C[n-1];
        
        */

        
        
    }
}
