
/* Structure of the node*/
/* class Node
{
	int data;
	Node next;
	
	Node(int d)
	{
		data = d;
		next = null;
	}
} */

class GfG
{
    
    /*
    
    Node reverse(Node head)
    {
        Node curr=head;
        Node prev=null;
        
        while(curr!=null)
        {
            Node temp=curr.next;
            curr.next=prev;
            prev=curr;
            curr=temp;
            
        }
        
        return prev;
    }
    
    */

    Node mergeResult(Node node1, Node node2)
    {
	// Your code here
	
	
	    ArrayList<Integer> arr = new ArrayList<>();
	    
	    while(node1!=null)
	    {
	        arr.add(node1.data);
	        node1=node1.next;
	    }
	    
	    while(node2!=null)
	    {
	    
	        arr.add(node2.data);
	        node2=node2.next;
	    }
	    
	    Collections.sort(arr);
	    Node prev=null;
	    Node head=null;
	    
	    for(int i=arr.size()-1;i>=0;i--)
	    {
	        Node newNode = new Node(arr.get(i));
	        
	        if(prev!=null)
	        {
	            prev.next=newNode;
	            
	        }
	        
	        else
	        head=newNode;
	        prev=newNode;
	    }
	    return head;     
	
	
	
	
	
	
	
	
	
	
	
	
	/*
	    Node dummy = new Node(0); 
        Node tail = dummy; 
        
        
        while(true)  
        { 
            if(node1 == null) 
            { 
                tail.next = node2; 
                break; 
            } 
            
            if(node2 == null) 
            { 
                tail.next = node1; 
                break; 
            } 
            
            if(node1.data <= node2.data) 
            { 
                tail.next = node1;
                node1 = node1.next; 
                
            }  
            else
            { 
                tail.next = node2; 
                node2 = node2.next; 
            } 
            
            tail = tail.next; 
            
        } 
        
        
        return reverse(dummy.next);

	
	
	*/
	
	
	
    }
}
