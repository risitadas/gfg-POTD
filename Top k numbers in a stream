

class Solution {
    
    public static HashMap<Integer,Integer> map;

    public static ArrayList<ArrayList<Integer>> kTop(int[] arr, int N, int K) 
    {
        // code here
        
        
        map=new HashMap<>();
        ArrayList<ArrayList<Integer>> mainList = new ArrayList<>();
        
        for (int i = 0; i < N; i++) 
        {
            ArrayList<Integer> subList = new ArrayList<>();
            map.put(arr[i], map.getOrDefault(arr[i], 0) + 1);
            PriorityQueue<Integer> pq = new PriorityQueue<>(new FreqComparator());
            pq.addAll(map.keySet());

            while (!pq.isEmpty() && subList.size() < K) 
            {
                subList.add(pq.poll());
            }

            mainList.add(subList);
        }
        
        return mainList;

        
        
        
        
    }
    
    public static class FreqComparator implements Comparator<Integer>
    {
        public int compare(Integer n1,Integer n2)
        {
            
            
            if(map.containsKey(n1) && map.containsKey(n2))
            {
                if(map.get(n1)<map.get(n2))
                {
                    return 1;
                }
                else if(map.get(n1).equals(map.get(n2)))
                {
                    
                    return n1-n2;
                }
                else if(map.get(n1)>map.get(n2))
                {
                    
                    return -1;
                }
                
            }
            
            return 0;
        
            
            
        }
        
        
        
    }

}
        
